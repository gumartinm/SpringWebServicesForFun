<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:context="http://www.springframework.org/schema/context"
  xmlns:sws="http://www.springframework.org/schema/web-services"
  xmlns:util="http://www.springframework.org/schema/util"

  xsi:schemaLocation="http://www.springframework.org/schema/beans 
                      http://www.springframework.org/schema/beans/spring-beans.xsd
                      http://www.springframework.org/schema/web-services 
                      http://www.springframework.org/schema/web-services/web-services.xsd
                      http://www.springframework.org/schema/context 
                      http://www.springframework.org/schema/context/spring-context.xsd
                      http://www.springframework.org/schema/util 
                      http://www.springframework.org/schema/util/spring-util.xsd">

	<!-- Searches for @Endpoint  --> 
    <context:component-scan base-package="de.spring.webservices"/>

    <!--
        Aqui se podría especificar un unmarshaller (para la request) o un
        marshaller (para la response) especifico. Por ejemplo Castor.
        
        Por la anotacion que uso para el EndPoint y porque tengo JAXB2 en el
        classpath, Spring lo que está haciendo es el equivalente a si se 
        escribiera lo siguiente:
        
        <oxm:jaxb2-marshaller id="marshaller" context-path="de.spring.webservices.auto"/>
        
         Searches for @PayloadRoot
        <sws:annotation-driven marshaller="marshaller" unmarshaller="marshaller"/>
     -->
    <sws:annotation-driven/>

    <!--
        Spring makes the WSDL file for us from the XSD file.
        Launch the Jetty server and download WSDL file from this URL:
        http://localhost:8080/web-services-spring-server/spring-ws/example/example.wsdl
    -->
    <sws:dynamic-wsdl id="example" portTypeName="Examples"
        createSoap12Binding="true" createSoap11Binding="false"
        locationUri="/spring-ws/example"
        targetNamespace="http://gumartinm.name/spring-ws/example">
        <sws:xsd location="classpath:examples.xsd"/>
    </sws:dynamic-wsdl>


    <!-- Required in order to use SOAP 1.2
    	 id="messageFactory" is not a random choice, if you use another name it will not work
    	 (Spring will end up loading SOAP 1.1)
    -->
    <bean id="messageFactory" class="org.springframework.ws.soap.saaj.SaajSoapMessageFactory">
        <property name="soapVersion">
            <util:constant static-field="org.springframework.ws.soap.SoapVersion.SOAP_12" />
        </property>
    </bean>
    
    <sws:interceptors>
        <bean class="org.springframework.ws.soap.server.endpoint.interceptor.SoapEnvelopeLoggingInterceptor">
            <property name="logRequest" value="true"/>
            <property name="logResponse" value="true"/>
        </bean>

        <!-- 
            ¿Este validador funciona teniendo inheritance en el xsd? (inheritances es una cosa especial 
            del JAXB2 que estoy usando para generar las clases desde el xsd)
            Parece que el unmarshal (que supongo que se hace con el JAXB2 que está en el classpath
            debido al tipo de Endpoint que estoy usando, que por cierto no sé cual JAXB2 está cogiendo realmente) 
            funciona, así que supongo el validador tambien :/
            Lo que realmente tampoco sé es si hay alguna relación entre los validadores y JAXB2 :/
        -->
        <bean id="validatingInterceptor" 
            class="org.springframework.ws.soap.server.endpoint.interceptor.PayloadValidatingInterceptor">
            <property name="schema" value="classpath:examples.xsd"/>
            <property name="validateRequest" value="true"/>
            <property name="validateResponse" value="true"/>
        </bean>
    </sws:interceptors>
    
   
    <bean id="exceptionResolver"
        class="org.springframework.ws.soap.server.endpoint.SoapFaultMappingExceptionResolver">
        <property name="defaultFault" value="SERVER"/>
        <property name="exceptionMappings">
            <value>
                org.springframework.oxm.ValidationFailureException=CLIENT,Invalid request
            </value>
        </property>
    </bean>
    
</beans>
