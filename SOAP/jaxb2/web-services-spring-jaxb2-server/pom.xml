<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<artifactId>web-services-spring-jaxb2</artifactId>
		<groupId>de.spring.webservices</groupId>
		<version>1.0-SNAPSHOT</version>
	</parent>
	<artifactId>web-services-spring-jaxb2-server</artifactId>
	<packaging>war</packaging>
	<name>web-services-spring-jaxb2-server</name>
	<url>http://gumartinm.name</url>

	<properties>
		<jetty.version>9.3.0.RC0</jetty.version>
		<project.xsd.schemas.source.path>src/main/resources/schemas</project.xsd.schemas.source.path>
		<project.xsd.schemas.target.path>${project.build.directory}/generated-sources/src/main/java</project.xsd.schemas.target.path>
		<project.xsd.schemas.package.name>de.spring.webservices.server.auto</project.xsd.schemas.package.name>
		<project.bindings.path>src/main/build-resources/bindings</project.bindings.path>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.springframework.ws</groupId>
			<artifactId>spring-ws-core</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.ws</groupId>
			<artifactId>spring-xml</artifactId>
		</dependency>
		<dependency>
			<groupId>org.jdom</groupId>
			<artifactId>jdom</artifactId>
		</dependency>


		<!-- Global types -->
		<dependency>
			<groupId>de.spring.webservices</groupId>
			<artifactId>web-services-spring-jaxb2-globalxsds</artifactId>
			<version>${project.version}</version>
		</dependency>


		<!-- Required by spring-ws-core -->
		<dependency>
			<groupId>wsdl4j</groupId>
			<artifactId>wsdl4j</artifactId>
		</dependency>

        <!-- Required by my CustomHeaderInterceptor -->
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>javax.servlet-api</artifactId>
            <version>4.0.0-b01</version>
            <scope>provided</scope>
        </dependency>

		<!-- Unitary and integration tests -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.ws</groupId>
			<artifactId>spring-ws-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-core</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<finalName>${project.artifactId}</finalName>
		<resources>
			<resource>
				<directory>${basedir}/src/main/webapp</directory>
				<excludes>
					<exclude>**/*.*</exclude>
				</excludes>
			</resource>
			<resource>
				<directory>${basedir}/src/main/resources/</directory>
				<includes>
					<include>**/*.*</include>
				</includes>
			</resource>
		</resources>
		<plugins>
			<plugin>
				<groupId>org.jvnet.jaxb2.maven2</groupId>
				<artifactId>maven-jaxb2-plugin</artifactId>
				<version>0.13.1</version>
				<executions>
					<execution>
						<id>generate-sources-from-xsd</id>
						<goals>
							<goal>generate</goal>
						</goals>
						<phase>generate-sources</phase>
					</execution>
				</executions>
				<configuration>
					<schemaLanguage>XMLSCHEMA</schemaLanguage>
					
					<!-- Specifies the schema directory, src/main/resources by default. -->
					<schemaDirectory>${project.xsd.schemas.source.path}</schemaDirectory>

					<!-- Specifies the binding directory, default to the schemaDirectory -->
					<bindingDirectory>${project.bindings.path}</bindingDirectory>
					<!-- Do not scan for *.xjb files in dependencies -->
					<scanDependenciesForBindings>false</scanDependenciesForBindings>

					<!-- Target directory for the generated code, target/generated-sources/xjc 
						by default. -->
					<generateDirectory>${project.xsd.schemas.target.path}</generateDirectory>

					<!-- The generated classes will all be placed under this Java package 
						(XJC's -p option), unless otherwise specified in the schemas. If left unspecified, 
						the package will be derived from the schemas only. -->
					<generatePackage>${project.xsd.schemas.package.name}</generatePackage>

					<!-- I don't think I need the next two options because mvn clean should 
						make the trick, anyhow, I am using them. If true, the generateDirectory will 
						be deleted before the XJC binding compiler recompiles the source files. Default 
						is false. -->
					<removeOldOutput>true</removeOldOutput>
					<!-- If true (default), package directories will be cleaned before the 
						XJC binding compiler generates the source files. -->
					<cleanPackageDirectories>true</cleanPackageDirectories>

					<!-- Encoding for the generated sources, defaults to ${project.build.sourceEncoding}. -->
					<encoding>${project.build.sourceEncoding}</encoding>

					<!-- Locale used during generation, for instance en, de, fr etc. This 
						will, for instance, influence the language of the generated JavaDoc comments. -->
					<locale>en</locale>

					<!-- This nice configuration avoids to use build-helper-maven-plugin -->
					<addCompileSourceRoot>true</addCompileSourceRoot>
					<addTestCompileSourceRoot>false</addTestCompileSourceRoot>

					<!-- If true (default), XJC will perform strict validation of the input 
						schema. If strict is set to false XJC will be run with -nv, this disables 
						strict validation of schemas.

					 	The plugin is configured to use catalogs and strict mode at the 
						same time. Using catalogs to resolve schema URIs in strict mode is known 
						to be problematic and may fail. Please refer to the following link for more 
						information: https://github.com/highsource/maven-jaxb2-plugin/wiki/Catalogs-in-Strict-Mode 
						Consider setting <strict>false</strict> in your plugin configuration. -->
					<strict>false</strict>

					<verbose>true</verbose>

					<extension>true</extension>
					<args>
						<arg>-Xinheritance</arg>
						<arg>-Xannotate</arg>
					</args>
					<plugins>
						<plugin>
							<groupId>org.jvnet.jaxb2_commons</groupId>
							<artifactId>jaxb2-basics</artifactId>
							<version>0.9.5</version>
						</plugin>
						<plugin>
							<groupId>org.jvnet.jaxb2_commons</groupId>
							<artifactId>jaxb2-basics-annotate</artifactId>
							<version>1.0.2</version>
						</plugin>
					</plugins>

					<!--  Avoids the annoying SCD "x-schema::tns" didn't match any schema component errors. -->
					<addIfExistsToEpisodeSchemaBindings>true</addIfExistsToEpisodeSchemaBindings>
					
					<!--
						GRAN DIFERENCIA:
					 
						:) CON ESTE PLUGIN A DIFERENCIA DE cxf-xjc-plugin NO SE VUELVEN A GENERAR LOS OBJETOS DE parent.xsd
						QUE SE ENCONTRABAN EN web-services-spring-jaxb2-globalxsds
						
						CON cxf-xjc-plugin SÍ SE VUELVEN A GENERAR INCLUSO AUNQUE USEMOS EPISODIOS :(
						
						CON ESTE PLUGIN CONSEGUIMOS NO EMPAQUETAR AQUÍ TAMBIÉN LAS MISMAS CLASES QUE
						TENÍAMOS EN web-services-spring-jaxb2-globalxsds
						
						ESTE PLUGIN ES MUCHO MEJOR QUE cxf-xjc-plugin :)
					-->
						
					<!-- You can use the useDependenciesAsEpisodes instead of configuring 
						individual episodes. In this case all the dependencies will be treated as 
						episodes which is very convenient (less configuration). I am going to use 
						the long way (individual episodes) -->
					<useDependenciesAsEpisodes>false</useDependenciesAsEpisodes>
					<catalog>src/main/build-resources/catalogs/catalog.cat</catalog>
					<episodes>
						<episode>
							<groupId>de.spring.webservices</groupId>
							<artifactId>web-services-spring-jaxb2-globalxsds</artifactId>
						</episode>
					</episodes>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-war-plugin</artifactId>
				<version>2.6</version>
				<configuration>
					<webResources>
						<resource>
							<filtering>true</filtering>
							<directory>src/main/webapp</directory>
							<includes>
								<include>WEB-INF/web.xml</include>
							</includes>
						</resource>
					</webResources>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.eclipse.jetty</groupId>
				<artifactId>jetty-maven-plugin</artifactId>
				<version>${jetty.version}</version>
				<configuration>
					<jettyXml>${basedir}/src/main/jetty/jetty-http.xml</jettyXml>
				</configuration>
			</plugin>
		</plugins>
	</build>
</project>
