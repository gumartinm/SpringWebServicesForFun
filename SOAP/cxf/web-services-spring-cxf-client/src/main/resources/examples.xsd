<?xml version="1.0" encoding="UTF-8" ?>
<xsd:schema xmlns="http://gumartinm.name/spring-ws/example"
	xmlns:xsd="http://www.w3.org/2001/XMLSchema"
    xmlns:parent="http://gumartinm.name/spring-ws/parent"
    xmlns:jaxb="http://java.sun.com/xml/ns/jaxb"
    xmlns:inheritance="http://jaxb2-commons.dev.java.net/basic/inheritance"
    xmlns:annox="http://annox.dev.java.net"
    jaxb:version="2.1"
    jaxb:extensionBindingPrefixes="inheritance annox"
    targetNamespace="http://gumartinm.name/spring-ws/example"
    elementFormDefault="qualified"
    attributeFormDefault="unqualified">
    
    <!--
    	  When should an item be declared as an element versus when should it be defined as a type?
    	  When in doubt, make it a type. You can always create an element from the type, if needed. With a type, other elements can reuse that type.
    	  
    	  <xsd:all> specifies that the child elements can appear in any order.
    	  
    	  <xsd:sequence> specifies child elements can only appear in the order mentioned.
    -->

    <!--
        We are going to use catalog.cat in order to avoid downloading parent.xsd from remote server
        when creating Java objects from examples.xsd.
    -->
    <xsd:import namespace="http://gumartinm.name/spring-ws/parent" schemaLocation="http://gumartinm.name/spring-ws/parent/parent.xsd" />


	<!-- Spring requires the following:
	     1. XSD elements being used as request must end with Request name.
	     2. XSD elements being used as response must end with Response name.

		 IN THIS WAY SPRING FINDS OUT HOW TO CREATE THE wsdl:operation IN THE AUTOGENERATED WSDL.
		 
		 ExampleRequest and ExampleResponse will be associated to the wsdl:operation Example in the autogenerated wsdl and
		 the wsdl:operation Example will have the wsdl:request ExampleRequest and wsdl:response ExampleResponse  elements.
		 The same for CustomBindingExample.
	-->
	<!-- Using inheritance and annox plugin -->
	<xsd:element name="ExampleRequest">
	   <xsd:complexType>
	       <xsd:annotation>
                <xsd:appinfo>
                    <annox:annotate>@java.lang.SuppressWarnings({"unchecked","rawtypes"})</annox:annotate> 
                    <inheritance:implements>de.spring.webservices.operations.Request</inheritance:implements>
                </xsd:appinfo>
            </xsd:annotation>   
            <xsd:all>
                <xsd:element name="data" type="parent:limitedStringType" />
            </xsd:all>
        </xsd:complexType>
	</xsd:element>
    <xsd:element name="ExampleResponse">
        <xsd:complexType>
        <xsd:annotation>
                <xsd:appinfo>
                    <inheritance:implements>de.spring.webservices.operations.Response</inheritance:implements>
                </xsd:appinfo>
            </xsd:annotation>  
            <xsd:all>
                <xsd:element name="data" type="xsd:string" />
            </xsd:all>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="ExampleFault">
    	<xsd:complexType>
    		<xsd:sequence>
    			<xsd:element ref="parent:GeneralFault" />
    		</xsd:sequence>
    	</xsd:complexType>
    </xsd:element>


	<!-- Using custombinding.xjb instead of inheritance plugin.
		 Useful when you can not modify your xsd files because they are provided
		 by another person or company
	-->
    <xsd:element name="CustomBindingExampleRequest">
	   <xsd:complexType>
            <xsd:all>
                <xsd:element name="data" type="xsd:string" />
                <xsd:element name="exampleDate" type="xsd:dateTime" minOccurs="0" maxOccurs="1" />
                <xsd:element name="parentEnum" type="parent:parentEnumType" minOccurs="0" maxOccurs="1" />
            </xsd:all>
        </xsd:complexType>
	</xsd:element>
    <xsd:element name="CustomBindingExampleResponse">
        <xsd:complexType>
            <xsd:all>
                <xsd:element name="data" type="xsd:string" />
                <xsd:element name="exampleDate" type="xsd:dateTime" minOccurs="0" maxOccurs="1" />
                <xsd:element name="parentEnum" type="parent:parentEnumType" minOccurs="0" maxOccurs="1" />
            </xsd:all>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="CustomBindingExampleFault">
    	<xsd:complexType>
    		<xsd:sequence>
    			<xsd:element ref="parent:GeneralFault" />
    		</xsd:sequence>
    	</xsd:complexType>
    </xsd:element>

	<!-- Example of creating array list by means of XSD -->
    <xsd:complexType name="car">
    	<xsd:sequence>
    		<xsd:element name="data" type="xsd:string" />
    		<xsd:element name="parentEnum" type="parent:parentEnumType" minOccurs="0" maxOccurs="100" />
    	</xsd:sequence>
    </xsd:complexType>
    <xsd:complexType name="truck">
    	<xsd:all>
    		<xsd:element name="data" type="xsd:string" />
    		<xsd:element name="parentEnum" type="parent:parentEnumType" minOccurs="0" maxOccurs="1" />
    	</xsd:all>
    </xsd:complexType>
    <xsd:element name="vehicles">
        <xsd:complexType>
        	<xsd:sequence>
				<xsd:element name="cars" type="car" maxOccurs="unbounded" />
				<xsd:element name="trucks" type="truck" minOccurs="0" maxOccurs="100" />
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>

</xsd:schema>
